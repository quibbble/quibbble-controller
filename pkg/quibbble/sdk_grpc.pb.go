// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: sdk.proto

package quibbble

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SDK_GetSnapshot_FullMethodName    = "/quibbble.com.SDK/GetSnapshot"
	SDK_StreamSnapshot_FullMethodName = "/quibbble.com.SDK/StreamSnapshot"
	SDK_JoinTeam_FullMethodName       = "/quibbble.com.SDK/JoinTeam"
	SDK_PlayAction_FullMethodName     = "/quibbble.com.SDK/PlayAction"
	SDK_UndoAction_FullMethodName     = "/quibbble.com.SDK/UndoAction"
	SDK_ResetGame_FullMethodName      = "/quibbble.com.SDK/ResetGame"
)

// SDKClient is the client API for SDK service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC definition for the SDK Server.
// This service sits in front of the Game Server and
// handles all player connections and networking.
// Wrappers are created around the SDK client to
// provide users with an SDK for interacting with Quibbble APIs.
type SDKClient interface {
	// Retrieves the current state of the game from the player's viewpoint.
	GetSnapshot(ctx context.Context, in *Player, opts ...grpc.CallOption) (*SDKSnapshot, error)
	// Streams all updates to the game from the player's viewpoint.
	StreamSnapshot(ctx context.Context, in *Player, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SDKSnapshot], error)
	// Allows a player to join a team.
	JoinTeam(ctx context.Context, in *Player, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Allows a player to play an action.
	PlayAction(ctx context.Context, in *SDKAction, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Allows a player to undo the last action if they were the ones to play the action.
	UndoAction(ctx context.Context, in *Player, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Allows a player to reset the entire game.
	ResetGame(ctx context.Context, in *Player, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sDKClient struct {
	cc grpc.ClientConnInterface
}

func NewSDKClient(cc grpc.ClientConnInterface) SDKClient {
	return &sDKClient{cc}
}

func (c *sDKClient) GetSnapshot(ctx context.Context, in *Player, opts ...grpc.CallOption) (*SDKSnapshot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SDKSnapshot)
	err := c.cc.Invoke(ctx, SDK_GetSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDKClient) StreamSnapshot(ctx context.Context, in *Player, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SDKSnapshot], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SDK_ServiceDesc.Streams[0], SDK_StreamSnapshot_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Player, SDKSnapshot]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SDK_StreamSnapshotClient = grpc.ServerStreamingClient[SDKSnapshot]

func (c *sDKClient) JoinTeam(ctx context.Context, in *Player, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SDK_JoinTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDKClient) PlayAction(ctx context.Context, in *SDKAction, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SDK_PlayAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDKClient) UndoAction(ctx context.Context, in *Player, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SDK_UndoAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDKClient) ResetGame(ctx context.Context, in *Player, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SDK_ResetGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SDKServer is the server API for SDK service.
// All implementations must embed UnimplementedSDKServer
// for forward compatibility.
//
// gRPC definition for the SDK Server.
// This service sits in front of the Game Server and
// handles all player connections and networking.
// Wrappers are created around the SDK client to
// provide users with an SDK for interacting with Quibbble APIs.
type SDKServer interface {
	// Retrieves the current state of the game from the player's viewpoint.
	GetSnapshot(context.Context, *Player) (*SDKSnapshot, error)
	// Streams all updates to the game from the player's viewpoint.
	StreamSnapshot(*Player, grpc.ServerStreamingServer[SDKSnapshot]) error
	// Allows a player to join a team.
	JoinTeam(context.Context, *Player) (*emptypb.Empty, error)
	// Allows a player to play an action.
	PlayAction(context.Context, *SDKAction) (*emptypb.Empty, error)
	// Allows a player to undo the last action if they were the ones to play the action.
	UndoAction(context.Context, *Player) (*emptypb.Empty, error)
	// Allows a player to reset the entire game.
	ResetGame(context.Context, *Player) (*emptypb.Empty, error)
	mustEmbedUnimplementedSDKServer()
}

// UnimplementedSDKServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSDKServer struct{}

func (UnimplementedSDKServer) GetSnapshot(context.Context, *Player) (*SDKSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshot not implemented")
}
func (UnimplementedSDKServer) StreamSnapshot(*Player, grpc.ServerStreamingServer[SDKSnapshot]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSnapshot not implemented")
}
func (UnimplementedSDKServer) JoinTeam(context.Context, *Player) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTeam not implemented")
}
func (UnimplementedSDKServer) PlayAction(context.Context, *SDKAction) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayAction not implemented")
}
func (UnimplementedSDKServer) UndoAction(context.Context, *Player) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoAction not implemented")
}
func (UnimplementedSDKServer) ResetGame(context.Context, *Player) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetGame not implemented")
}
func (UnimplementedSDKServer) mustEmbedUnimplementedSDKServer() {}
func (UnimplementedSDKServer) testEmbeddedByValue()             {}

// UnsafeSDKServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SDKServer will
// result in compilation errors.
type UnsafeSDKServer interface {
	mustEmbedUnimplementedSDKServer()
}

func RegisterSDKServer(s grpc.ServiceRegistrar, srv SDKServer) {
	// If the following call pancis, it indicates UnimplementedSDKServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SDK_ServiceDesc, srv)
}

func _SDK_GetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDKServer).GetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SDK_GetSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDKServer).GetSnapshot(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDK_StreamSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Player)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SDKServer).StreamSnapshot(m, &grpc.GenericServerStream[Player, SDKSnapshot]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SDK_StreamSnapshotServer = grpc.ServerStreamingServer[SDKSnapshot]

func _SDK_JoinTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDKServer).JoinTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SDK_JoinTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDKServer).JoinTeam(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDK_PlayAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDKAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDKServer).PlayAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SDK_PlayAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDKServer).PlayAction(ctx, req.(*SDKAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDK_UndoAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDKServer).UndoAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SDK_UndoAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDKServer).UndoAction(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDK_ResetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDKServer).ResetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SDK_ResetGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDKServer).ResetGame(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

// SDK_ServiceDesc is the grpc.ServiceDesc for SDK service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SDK_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quibbble.com.SDK",
	HandlerType: (*SDKServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSnapshot",
			Handler:    _SDK_GetSnapshot_Handler,
		},
		{
			MethodName: "JoinTeam",
			Handler:    _SDK_JoinTeam_Handler,
		},
		{
			MethodName: "PlayAction",
			Handler:    _SDK_PlayAction_Handler,
		},
		{
			MethodName: "UndoAction",
			Handler:    _SDK_UndoAction_Handler,
		},
		{
			MethodName: "ResetGame",
			Handler:    _SDK_ResetGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSnapshot",
			Handler:       _SDK_StreamSnapshot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk.proto",
}
